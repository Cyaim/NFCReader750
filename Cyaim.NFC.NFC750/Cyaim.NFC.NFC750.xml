<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cyaim.NFC.NFC750</name>
    </assembly>
    <members>
        <member name="M:Cyaim.NFC.NFC750.ExternalAPI.HfrdApi.ByteHex(System.Byte)">
            <summary>
            单个字节转字字符.
            </summary>
            <param name="ib">字节.</param>
            <returns>转换好的字符.</returns>
        </member>
        <member name="T:Cyaim.NFC.NFC750.LibResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Cyaim.NFC.NFC750.LibResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Cyaim.NFC.NFC750.LibResource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Cyaim.NFC.NFC750.LibResource.hfrdapi_x64">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Cyaim.NFC.NFC750.LibResource.hfrdapi_x86">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="T:Cyaim.NFC.NFC750.NFC750Helper">
            <summary>
            NFC 750系列
            </summary>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.#ctor">
            <summary>
            实例化时将会初始化环境
            </summary>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.InitEnvironment(System.String)">
            <summary>
            释放依赖库文件
            </summary>
            <param name="path">文件名hfrdapi.dll，默认程序运行目录</param>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.GetLibVersion">
            <summary>
            获取动态库链接库版本号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.GetDeviceNum(System.UInt16,System.UInt16)">
            <summary>
            获取连接到PC的设备数
            </summary>
            <param name="vendorID">Vendor ID</param>
            <param name="productID">Product ID</param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.GetDeviceSerialNumber(System.UInt32,System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            获取设备序列号
            </summary>
            <param name="deviceIndex">设备索引</param>
            <param name="bufferSize">缓冲区大小</param>
            <param name="vendorID"></param>
            <param name="productID"></param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.Open(Cyaim.NFC.NFC750.DeviceType,System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            打开HID设备
            </summary>
            <param name="deviceType">设备标准</param>
            <param name="deviceIndex">设备索引</param>
            <param name="vendorID">Vendor ID</param>
            <param name="productID">Product ID</param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.Open(Cyaim.NFC.NFC750.INFCDevice,System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            打开HID设备
            </summary>
            <param name="device">设备标准</param>
            <param name="deviceIndex">设备索引</param>
            <param name="vendorID">Vendor ID</param>
            <param name="productID">Product ID</param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.CreateNFCDevice(Cyaim.NFC.NFC750.DeviceType)">
            <summary>
            创建设备操作对象
            </summary>
            <param name="deviceType">设备标准</param>
            <param name="deviceIndex">设备索引</param>
            <param name="vendorID">Vendor ID</param>
            <param name="productID">Product ID</param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.IsOpen(Cyaim.NFC.NFC750.INFCDevice)">
            <summary>
            设备是否打开
            ，“设备已经打开”并不代表设备与计算机处于正常连接状态，比如在设备打开成功后拔掉USB数据线，可以查询到设备仍然是“设备已经打开”状态，但实际上不是处于连接状态了，确认连接状态可通过调用GetDeviceInfo或GetDeviceAddress来判断
            </summary>
            <returns>
            true已打开，false未打开
            </returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.Close(Cyaim.NFC.NFC750.INFCDevice)">
            <summary>
            关闭设备
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.GetModel(Cyaim.NFC.NFC750.INFCDevice)">
            <summary>
            读取读写卡器型号信息
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.GetSnr(Cyaim.NFC.NFC750.INFCDevice)">
            <summary>
            获取设备的产品序列号
            </summary>
            <param name="device"></param>
            <returns>返回读写卡器产品序列号,4 字节，高字节在前</returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.SetLight(Cyaim.NFC.NFC750.INFCDevice,Cyaim.NFC.NFC750.DeviceLightColor)">
            <summary>
            设置指示灯颜色
            </summary>
            <param name="device"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.PlayBeep(Cyaim.NFC.NFC750.INFCDevice,System.UInt32)">
            <summary>
            蜂鸣
            </summary>
            <param name="device"></param>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.SetAntenna(Cyaim.NFC.NFC750.INFCDevice,System.Boolean)">
            <summary>
            设置读写器天线状态,在不需要操作卡时可以将天线关闭，以降低读写器的功耗；通过关闭、打开天线可实现卡片重新上电、复位；
            </summary>
            <param name="device"></param>
            <param name="isOpen"></param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.SetInitType(Cyaim.NFC.NFC750.INFCDevice,System.Char)">
            <summary>
            设置读写器非接触工作方式。
            <para>只支持单一协议的读写器仅对部分方式有效</para>
            <para>
            type = 'A' -> 设置为ISO14443A方式，ISO14443A类别的函数使用此方式；
            type = 'B' -> 设置为ISO14443B方式，SGIDC(二代证)、ISO14443B-4类别的函数使用此方式；
            type = 'r' -> 设置为AT88RF020卡方式，AT88RF020类别的函数使用此方式；
            type = 's' -> 设置为ST卡方式，SR176、SRI4K类别的函数使用此方式；
            type = '1' -> 设置为ISO15693方式，ISO15693类别的函数使用此方式；
            </para>
            </summary>
            <param name="device"></param>
            <param name="type"></param>
            <returns>0成功，非0为错误代码</returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750Helper.SetReset(Cyaim.NFC.NFC750.INFCDevice,Cyaim.NFC.NFC750.DeviceResetType)">
            <summary>
            复位
            </summary>
            <param name="device"></param>
            <param name="type"></param>
            <returns>0成功，非0为错误代码</returns>
        </member>
        <member name="F:Cyaim.NFC.NFC750.DeviceResetType.Reader">
            <summary>
            读写器
            </summary>
        </member>
        <member name="F:Cyaim.NFC.NFC750.DeviceResetType.RFIC">
            <summary>
            射频IC
            </summary>
        </member>
        <member name="P:Cyaim.NFC.NFC750.NFC750_ISO15693.HasDeviceOpen">
            <summary>
            设备是否打开
            </summary>
        </member>
        <member name="P:Cyaim.NFC.NFC750.NFC750_ISO15693.DeviceAddress">
            <summary>
            设备地址
            </summary>
        </member>
        <member name="P:Cyaim.NFC.NFC750.NFC750_ISO15693.DeviceModel">
            <summary>
            读卡器型号
            </summary>
        </member>
        <member name="P:Cyaim.NFC.NFC750.NFC750_ISO15693.DeviceIndex">
            <summary>
            设备索引
            </summary>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750_ISO15693.Inventory(System.Boolean)">
            <summary>
            寻找符合ISO15693标准的卡(1 slot方式)
            </summary>
            <param name="autoLength">是否自动确定数据长度</param>
            <returns>1字节DSFID+8字节UID</returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750_ISO15693.Read(Cyaim.NFC.NFC750.ISO15693_Mode,System.String,System.UInt32,System.Boolean,System.UInt16)">
            <summary>
            读ISO15693卡的块内容
            </summary>
            <param name="readMode">
            Select_flag、Addres_flag位不能同时设为1；
            若Select_flag = 1，只有处于SELECT状态的卡执行该命令；
            若Addres_flag = 1，只有UID符合的卡执行该命令；
            若Option_flag = 0，pData数据格式为：4字节Data，根据需要重复；
            若Option_flag = 1，pData数据格式为：1字节Block security status + 4字节Data，根据需要重复；
            </param>
            <param name="uid">8字节UID</param>
            <param name="blockID">块号</param>
            <param name="autoLength">自动获取数据块长度</param>
            <param name="readNum">读取的块数</param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750_ISO15693.Read(Cyaim.NFC.NFC750.ISO15693_Mode,System.Byte[],System.UInt32,System.Boolean,System.UInt16)">
            <summary>
            读ISO15693卡的块内容
            </summary>
            <param name="readMode">
            Select_flag、Addres_flag位不能同时设为1；
            若Select_flag = 1，只有处于SELECT状态的卡执行该命令；
            若Addres_flag = 1，只有UID符合的卡执行该命令；
            若Option_flag = 0，pData数据格式为：4字节Data，根据需要重复；
            若Option_flag = 1，pData数据格式为：1字节Block security status + 4字节Data，根据需要重复；
            </param>
            <param name="uid">8字节UID</param>
            <param name="blockID">块号</param>
            <param name="autoLength">自动获取数据块长度</param>
            <param name="readNum">读取的块数</param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750_ISO15693.ReadToString(Cyaim.NFC.NFC750.ISO15693_Mode,System.String,System.UInt32,System.Boolean,System.UInt16)">
            <summary>
            读ISO15693卡的块内容
            </summary>
            <param name="readMode">
            Select_flag、Addres_flag位不能同时设为1；
            若Select_flag = 1，只有处于SELECT状态的卡执行该命令；
            若Addres_flag = 1，只有UID符合的卡执行该命令；
            若Option_flag = 0，pData数据格式为：4字节Data，根据需要重复；
            若Option_flag = 1，pData数据格式为：1字节Block security status + 4字节Data，根据需要重复；
            </param>
            <param name="uid">8字节UID</param>
            <param name="blockID">块号</param>
            <param name="autoLength">自动获取数据块长度</param>
            <param name="readNum">读取的块数</param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750_ISO15693.ReadToString(Cyaim.NFC.NFC750.ISO15693_Mode,System.Byte[],System.UInt32,System.Boolean,System.UInt16)">
            <summary>
            读ISO15693卡的块内容
            </summary>
            <param name="readMode">
            Select_flag、Addres_flag位不能同时设为1；
            若Select_flag = 1，只有处于SELECT状态的卡执行该命令；
            若Addres_flag = 1，只有UID符合的卡执行该命令；
            若Option_flag = 0，pData数据格式为：4字节Data，根据需要重复；
            若Option_flag = 1，pData数据格式为：1字节Block security status + 4字节Data，根据需要重复；
            </param>
            <param name="uid">8字节UID</param>
            <param name="blockID">块号</param>
            <param name="autoLength">自动获取数据块长度</param>
            <param name="readNum">读取的块数</param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750_ISO15693.Write(Cyaim.NFC.NFC750.ISO15693_Mode,System.String,System.UInt32,System.String)">
            <summary>
            写1块内容到ISO15693卡
            </summary>
            <param name="writeMode">操作类型</param>
            <param name="uid">十六进制UID</param>
            <param name="blockID">区块号</param>
            <param name="data">最多写入6位字符</param>
            <returns></returns>
        </member>
        <member name="M:Cyaim.NFC.NFC750.NFC750_ISO15693.Write(Cyaim.NFC.NFC750.ISO15693_Mode,System.Byte[],System.UInt32,System.Byte[])">
            <summary>
            写1块内容到ISO15693卡
            </summary>
            <param name="writeMode">操作类型</param>
            <param name="uid">十六进制UID</param>
            <param name="blockID">区块号</param>
            <param name="data">最多写入4字节</param>
            <returns></returns>
        </member>
    </members>
</doc>
